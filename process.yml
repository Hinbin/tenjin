version: 2
jobs:
  build:
    working_directory: ~/tenjin
    steps:
    - checkout
    - run:
        name: Configure bundler
        command: |
          echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
          source $BASH_ENV
          gem install bundler
    - restore_cache:
        name: Restore bundle cache
        keys:
        - tenjin-bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
        - tenjin-bundle-{{ arch }}-
    - run:
        command: bundle install --jobs=4 --retry=3 --clean --path vendor/bundle
    - save_cache:
        name: Store bundle cache
        key: tenjin-bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle
    - restore_cache:
        name: Restore yarn cache
        keys:
        - tenjin-yarn-{{ checksum "yarn.lock" }}
        - tenjin-yarn-
    - run:
        command: yarn install --cache-folder ~/.cache/yarn
    - save_cache:
        name: Store yarn cache
        key: tenjin-yarn-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    docker:
    - image: circleci/ruby:2.7.1-node-browsers
      environment:
        RAILS_ENV: test
  test:
    working_directory: ~/tenjin
    steps:
    - checkout
    - run:
        name: Configure bundler
        command: |
          echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
          source $BASH_ENV
          gem install bundler
    - restore_cache:
        name: Restore bundle cache
        keys:
        - tenjin-bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
        - tenjin-bundle-{{ arch }}-
    - run:
        command: bundle install --jobs=4 --retry=3 --clean --path vendor/bundle
    - save_cache:
        name: Store bundle cache
        key: tenjin-bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
        paths:
        - vendor/bundle
    - restore_cache:
        name: Restore yarn cache
        keys:
        - tenjin-yarn-{{ checksum "yarn.lock" }}
        - tenjin-yarn-
    - run:
        command: yarn install --cache-folder ~/.cache/yarn
    - save_cache:
        name: Store yarn cache
        key: tenjin-yarn-{{ checksum "yarn.lock" }}
        paths:
        - ~/.cache/yarn
    - run:
        name: precompile assets
        command: |
          bin/rails shakapacker:compile
    - run:
        command: dockerize -wait tcp://localhost:5432 -timeout 1m
    - run:
        command: bin/rails db:create db:schema:load
    - run:
        name: run tests
        command: |
          mkdir /tmp/test-results
          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
            circleci tests split --split-by=timings)"
          bundle exec rspec \
            --format progress \
            --format RspecJunitFormatter \
            --out /tmp/test-results/rspec.xml \
            --format progress \
            $TEST_FILES
    - store_test_results:
        path: /tmp/test-results
    - store_artifacts:
        path: /tmp/test-results
        destination: test-results
    - store_artifacts:
        path: /home/circleci/tenjin/tmp/screenshots/
        destination: browser-screenshots
    parallelism: 1
    docker:
    - image: circleci/ruby:2.7.1-node-browsers
      environment:
        PGUSER: root
        PGHOST: 127.0.0.1
        RAILS_ENV: test
    - image: circleci/postgres:10.9
      environment:
        POSTGRES_USER: root
workflows:
  version: 2
  build_and_test:
    jobs:
    - build
    - test:
        requires:
        - build

# Original config.yml file:
# # Ruby CircleCI 2.0 configuration file
# #
# # Check https://circleci.com/docs/2.0/language-ruby/ for more details
# #
# version: 2.1
# commands:
#   shared_steps:
#     steps:
#       - checkout
# 
#       - run:
#           name: Configure bundler
#           command: |
#             echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d \" \")' >> $BASH_ENV
#             source $BASH_ENV
#             gem install bundler
#       - restore_cache:
#           name: Restore bundle cache
#           keys:
#             - tenjin-bundle-{{ arch }}-{{ checksum \"Gemfile.lock\" }}
#             - tenjin-bundle-{{ arch }}-
#       - run: bundle install --jobs=4 --retry=3 --clean --path vendor/bundle
#       - save_cache:
#           name: Store bundle cache
#           key: tenjin-bundle-{{ arch }}-{{ checksum \"Gemfile.lock\" }}
#           paths:
#             - vendor/bundle
# 
#       - restore_cache:
#           name: Restore yarn cache
#           keys:
#             - tenjin-yarn-{{ checksum \"yarn.lock\" }}
#             - tenjin-yarn-
#       - run: yarn install --cache-folder ~/.cache/yarn
#       - save_cache:
#           name: Store yarn cache
#           key: tenjin-yarn-{{ checksum \"yarn.lock\" }}
#           paths:
#             - ~/.cache/yarn
# 
# default_job: &default_job
#   working_directory: ~/tenjin
#   steps:
#     - shared_steps
# 
# jobs:
#   build:
#     <<: *default_job
#     docker:
#       - image: circleci/ruby:2.7.1-node-browsers
#         environment:
#           RAILS_ENV: test
#   test:
#     <<: *default_job
#     parallelism: 1
#     docker:
#       - image: circleci/ruby:2.7.1-node-browsers
#         environment:
#             PGUSER: root
#             PGHOST: 127.0.0.1
#             RAILS_ENV: test
#       - image: circleci/postgres:10.9
#         environment:
#           POSTGRES_USER: root
# 
#     steps:
#       - shared_steps
#       - run:
#           name: precompile assets
#           command: |
#             bin/rails shakapacker:compile
# 
#       # Wait for DB
#       - run: dockerize -wait tcp://localhost:5432 -timeout 1m
# 
#       # Database setup   
#       - run: bin/rails db:create db:schema:load
# 
#       # run tests!
#       - run:
#           name: run tests
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES=\"$(circleci tests glob \"spec/**/*_spec.rb\" | \\
#               circleci tests split --split-by=timings)\"
#             bundle exec rspec \\
#               --format progress \\
#               --format RspecJunitFormatter \\
#               --out /tmp/test-results/rspec.xml \\
#               --format progress \\
#               $TEST_FILES
#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results
#       - store_artifacts:
#           path: /home/circleci/tenjin/tmp/screenshots/
#           destination: browser-screenshots
# 
# workflows:
#   version: 2
#   build_and_test:
#     jobs:
#       - build
#       - test:
#           requires:
#             - build